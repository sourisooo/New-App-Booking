import { useLocation } from 'react-router';
import qs from 'query-string';
import { useCallback, useMemo } from 'react';
import omit from 'lodash.omit';
import history from '../utils/history';

const useFiltersQuery = () => {
  const { search } = useLocation<string>();

  const searchFilters = useMemo(() => qs.parse(search, { parseNumbers: true, parseBooleans: true }), [search]);

  const setSearchQuery = useCallback(
    filter => {
      const search = qs.stringify(filter);
      history.replace({ search });
    },
    [history]
  );

  const clearFilter = useCallback(
    ({ target }) => {
      const { name } = target;
      const newFilter = omit(searchFilters, name);

      setSearchQuery(newFilter);
    },
    [searchFilters, setSearchQuery]
  );

  const handleChangeFilter = useCallback(
    ({ target }) => {
      const { name, value } = target;
      if (value === false || value === 0) {
        const newFilter = { ...searchFilters, [name]: value };
        setSearchQuery(newFilter);
        return clearFilter({ target });
      }
      const newFilter = { ...searchFilters, [name]: value };
      return setSearchQuery(newFilter);
    },

    [searchFilters, setSearchQuery, clearFilter]
  );
  const handleResetSearchFilters = useCallback(() => {
    history.replace({});
  }, [history]);

  return { searchFilters, handleChangeFilter, handleResetSearchFilters };
};

export default useFiltersQuery;

//Commentaires
//La fonction useFiltersQuery spécifie plusieurs fonctions en utilisant useLocation
//pour récupérer l'adresse HTML en cours, useMemo pour affecter soumission de masque de saisie à une l'adresse HTML actuelle.
//A Query String Collection is used to retrieve the variable values in the HTTP query string. If we want to transfer 
//a large amount of data then we can't use the Request. QueryString. Query Strings are also generated by form submission or 
//can be used by a user typing a query into the address bar of the browsers. 
// The main difference between useMemo and useCallback hook is, useMemo returns memoized value 
//and useCallback returns memoised function.
// La fonction setSearchQuery retourne une fonction en cas de modification de la dependance history. La fonction
//retournée remplace la dependance history par qs.filter, filter étant la variable d'entrée de la fonction setSearchQuery.
//La fonction clearFilter crée un nouveau type "newFilter" qui recence tous les types à l'exclustion de searchFilters, name
// puis applique la fonction setSearchQuery sur la nouvelle variable crée newFilter.
//La fonction handleChangeFilter prend un objet en entrée, cet objet étant constituée de deux variables puis constitue un objet
//searchFilters puis utilise la fonction setSearchQuery en prenant comme parametre le nouvel objet searchFiltrer. La fonctionnalité
//react useCallback permet de réaliser une fonction dans le cas ou la dépendance change de valeur (ici: searchFilters, setSearchQuery, clearFilter).
//La fonction useFiltersQuery retourne les principales fonctions défnis précédemment.
